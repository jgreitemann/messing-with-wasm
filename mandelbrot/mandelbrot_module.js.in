var Module = {
    preRun: [],
    postRun: function () {
        var n_palettes = Module.ccall('get_number_of_palettes', 'number', [], []);
        var pal_name = Module.cwrap('get_palette_name', 'string', ['number']);
        var pal_names = [];
        for (var i = 0; i < n_palettes; ++i) {
            pal_names.push(pal_name(i));
        }
        postMessage({
            action: 'picker-fill',
            pickerEntries: pal_names
        });

        var mandelbrot;
        var px_data;

        self.onmessage = function (event) {
            msg = event.data;
            console.log(msg.action);
            if (msg.action == 'prep-pxdata') {
                mandelbrot = Module.cwrap('mandelbrot', null, ['number', 'number', 'number', 'number']);
                px_data = Module._malloc(msg.length * 4);
            } else if (msg.action == 'refresh-pxdata') {
                mandelbrot(msg.width, msg.height, px_data, msg.selected_pal);

                var data = msg.imageData.data;
                for (var i = 0; i < data.length; i++) {
                    var x = Module.getValue(px_data + i, 'i8');
                    // convert from signed to unsigned
                    if (x < 0) x += 256;
                    data[i] = x;
                }
                postMessage({
                    action: 'render-canvas',
                    imageData: msg.imageData
                });
            } else if (msg.action == 'update-viewport') {
                Module.ccall('set_viewport', null,
                             ['number', 'number', 'number', 'number'],
                             msg.rel_rect);
                postMessage({
                    action: 'viewport-updated'
                });
            }
        };
    },
    totalDependencies: 0
};

